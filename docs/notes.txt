4/26/19
These are my notes for the approom application.


//---------------------------------------------------------------------------
To run:
1. Run mongod db daemon: Launch console with C:\Programs\MongoDB\Server\4.0\bin\mongod_run_with_config.lnk, which is shortcut to C:\Programs\MongoDB\Server\4.0\bin\mongod.exe -f mongod.cfg
2. Start nodejs running approom server: Go to E:\MyDocs\Programming\nodejs\approom\source and open console and run "npm run runserver" to 
3. Open https://www.testapp.com:8080
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
// see https://stackoverflow.com/questions/30909492/mongoerror-topology-was-destroyed



Approach to Registration and User Account Creation

Different applications may have different requirements of users in terms of registration.

In some cases, we may not need (or even support) a way for *normal* users to register a persistent account.
Instead we only need to be able to track a user across a session, via a cookie or an access token.

In other cases, we may want to be able to persist a user's settings/preferences/data across multiple sessions, by having them create an account.

In these cases, we may have user profile data that we *want* to gather, and other data that we *need* to gather before letting the user do some/most things.

Bridged logins refer to logins to the site that may be done using credentials on facebook, google, twitter, oath, etc.
With bridged logins, we can get a unique identifier for a user that will let us remember them when they come back later.
A bridged login in this way can create a user account creation after the first time that they bridge their account.

Though note that in these cases, we may want to insist on gathering additional information from them such as a unique username and email.

Advanced users may want to connect multiple bridged accounts with a local username-password account, so they can manage the different ways of logging in.

A traditional account registration via unique username/email and password should also be supported.

We would like to have initial user account creation be as painless as possible.  So for example we would like a user to simply provide an email address, which will result in a verification email,
after which the user is prompted for more information.

This approach in general favors very easy fast account initial account creation, in a state that may not be usable until the user provides extra information.

To accomplish these things, we take the following approach:

1. When a visitor performs a bridged-login with another service (facebook, twitter, oauth, etc.), a lightweight Login object is created in the database, which includes their 3rd party service ID, and any other information provided by it (real name, UNVERIFIED email, etc.).
This is not a full-blown user account.  If the person is already logged into a previously created full user account, the bridged Login object is CONNECTED to it, so it will now log the person into their real account.
If not, the system can be configured to: 1. Auto-create a full user account immediately -- though without a verified email address, and with a unique username that may not be the user's first choice. OR 2. be ready to ask the user to provide more profile info (unique username, email), and verify email address before creating a full user account.
When a person requests to register an account, the system only needs an email address to verify.  The system can be configured to take a requested username and password as well (though they are optional at this stage).
When they register in this way, a full User account is NOT used, and any optional requested username and/or email is NOT reserved.  Instead a simple *Verification object is created in the database (along with any optional profile info we want to gather at registration time).
ONLY when the user verifies their email address, is the system potentially ready to create a full USER account.
At this point, we may be ready to create a User account with no username and/or password.  But we can still let user login when they want by requesting a one-time email login token.
OR we can, as with a bridged login, force the user to specify a unique username and password before we proceed to the final step of creating a full User account.
In summary, a registration request creates a lightweigh VERIFICATION object in the db, and a bridged login creates a lightweight LOGIN object in the db.
Both of these can trigger the creation of a full User account when the user confirms the info we need to create an account (which may be none, but which would typically be a unique username, email. password).

//---------------------------------------------------------------------------
